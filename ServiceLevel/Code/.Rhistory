colMeans(test)/(lt+of)
d <- 30
d_std <- d*0.05
lt <- 60
of <- 28
test <- repeat_sim(d,d_std, 3, 100, lt, of, 0.5)
test
colMeans(test)/(lt+of)
demand_calculation <- function( d, d_std, n, lt = 7, of = 7, cf = 0.95){
# Initialize stocks:
lambda <- d/min(n,30)
st <- ceiling((d/min(n,30))*lt)
delivered <- rep(0,n)
est_stock <- rep(0,n)
est_stock[1] <- st
ss <- saftey_stock(d_std, cf, op = lt + of)
#Initialize demand
demand_n <- rep(d/min(n,30), n) # Since we are considering daily demand then we need to divide by 30
demand_total <- cumsum(demand_n)
demand_op <- d*(lt+of)/n
# Check if we need to order
need_order <- rep(0,n)
order_days <- (seq(1,floor(n/of))*of) - of#(of - 1)
need_order[order_days] <- 1
# Service Level
sl <- rep(1,n)
op <- (lt+of)
# initalize all values
est_stock[1] <- est_stock[1] - demand_n[1]
acc_est_stock <- est_stock
# If the estimated stock does not cover the OP then order the demand for the LT.
if( est_stock[1]  < sum(demand_n[2:op]) - sum(delivered[2:op]) ){
#delivered[lt] <- ceiling(lt*(lambda) + ss*lt/(op))
delivered[lt] <- ceiling(lt*(lambda) + ss)
#delivered[lt] <- ceiling(op*(lambda) + ss)
}
# n days into the future
for(i in 2:n){
ii <- min(i+1,n)
t_i <- min(i+lt+of, n)
of_i <- min(i+of, n)
lt_i <- min(i+lt, n)
op_i <- min(i+op, n)
# Simulate the demand
demand_n[i] <- rpois(1, lambda)
#Calculate est_stock
acc_est_stock[i] <- est_stock[i-1] - demand_n[i] + delivered[i]
est_stock[i] <- max(est_stock[i-1] - demand_n[i] + delivered[i],0) # Ignore negatives
if(est_stock[i]  < sum(demand_n[ii:t_i]) - sum(delivered[ii:t_i]) & need_order[i] == 1){
#delivered[lt_i] <- max(ceiling(sum(demand_n[i:lt_i])-sum(delivered[i:lt_i]) + ss*lt/(op)),0)
delivered[lt_i] <- max(ceiling(sum(demand_n[i:lt_i])-sum(delivered[i:lt_i]) + ss),0) ## Cover lead time or order period?
#delivered[lt_i] <- max(ceiling(sum(demand_n[i:op_i])-sum(delivered[i:op_i]) + ss),0) ## Cover lead time or order period?
}
sl[i] <- (est_stock[i] > 0)
}
df <- data.frame(
est_stock = est_stock,
acc_est_stock = acc_est_stock,
daily_demand = demand_n,
demand_total = cumsum(demand_n),
purchase_plan = delivered,
service_level = sl
)
return(df)
}
repeat_sim <- function(d, d_std, periods, nsim, lt, of, cf){
n <- (lt+of)*periods
p <- ceiling(n/(lt+of)) # number of periods we want to check
sl_mat <- matrix(nrow = nsim, ncol = p)
#print(p)
#print(dim(sl_mat))
for(i in 1:nsim){
sl <- demand_calculation( d = d, d_std = d_std, n = n, lt, of, cf )$service_level
#print(service_level_score( sl, p = p))
sl_mat[i,] <- service_level_score(sl, p = lt+of)
}
return(sl_mat[,-1])
}
d <- 30
d_std <- d*0.05
lt <- 60
of <- 28
test <- repeat_sim(d,d_std, 3, 100, lt, of, 0.5)
test
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 3, 100, lt, of, 0.95)
test
colMeans(test)/(lt+of)
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 3, 100, lt, of, 0.95)
test
colMeans(test)/(lt+of)
of <- 28
test <- repeat_sim(d,d_std, 3, 100, lt, of, 0.95)
test
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 3, 100, lt, of, 0.99)
test
colMeans(test)/(lt+of)
d_std <- d*0.5
lt <- 60
of <- 28
test <- repeat_sim(d,d_std, 3, 100, lt, of, 0.99)
test
colMeans(test)/(lt+of)
d_std <- d*0.1
lt <- 60
of <- 28
test <- repeat_sim(d,d_std, 3, 100, lt, of, 0.99)
test
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 3, 100, lt, of, 0.99)
test
colMeans(test)/(lt+of)
lt_s <- seq(1,14,1)
of_s <- seq(1,14,1)
p <-c(seq(0.5,0.95, 0.05),0.99)
x <- seq(0.01, 1, 0.01)
library(dplyr)
library(purrr)
library(ggplot2)
# Define a named list of parameter values
gs <- list( LT = lt_s,    OF = of_s, P = 0.95 , d_std = x )
tuning_param <- gs %>% cross_df()
op <- function(p){
ss <- ss_level(p, lt = 7, of = 7)
return(ss)
}
tuning_param$SS <- qnorm(tuning_param$P)*sqrt(tuning_param$LT+tuning_param$OF)*tuning_param$d_std
head(tuning_param)
ggplot(data=tuning_param, aes(x = LT, y = OF,  group=d_std, colour = SS)) +
#  geom_line() +
geom_point()
library(ggridges)
library(ggplot2)
library(viridis)
library(hrbrthemes)
install.packages("ggridges")
install.packages("viridis")
install.packages("hrbrthemes")
library(ggridges)
library(ggplot2)
library(viridis)
library(hrbrthemes)
# Plot
# data
str(lincoln_weather)
head(lincoln_weather)
library(readxl)
df <- read_excel("~/AGR Dynamics/ServiceLevel/Data/plot_data_test_sql.xlsx")
View(df)
str(df)
df$mth_name <- as.factor(df$mth_name)
str(lincoln_weather)
str(df)
ggplot(df, aes(x = `value`, y = `mth_name`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_viridis(name = "Temp. [F]", option = "C") +
labs(title = 'Temperatures in Lincoln NE in 2016') +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
)
df[df$value< 100]
df_sub <- df[value < 100]
df$mth_name <- as.factor(df$mth_name, levels = month.abb)
factor(df$mth_name, levels = month.abb)
factor(df$mth, levels = month.abb)
as.month(df$mth_name)
# data
df <- read_excel("~/AGR Dynamics/ServiceLevel/Data/plot_data_test_sql.xlsx")
str(df)
factor(df$mth_name, levels = month.abb)
df$mth_name <- factor(df$mth_name, levels = month.abb)
ggplot(df, aes(x = `value`, y = `mth_name`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_viridis(name = "Temp. [F]", option = "C") +
labs(title = 'Temperatures in Lincoln NE in 2016') +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
)
df$value < 100
df[df$value < 100]
df_sub <- df[df$value < 100,]
df_sub
ggplot(df_sub, aes(x = `value`, y = `mth_name`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_viridis(name = "Temp. [F]", option = "C") +
labs(title = 'Temperatures in Lincoln NE in 2016') +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
)
ggplot(df_sub, aes(x = `value`, y = `mth_name`, fill = ..x..)) +
geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
scale_fill_viridis(name = "Temp. [F]", option = "C") +
labs(title = 'Distribution of sales') +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
strip.text.x = element_text(size = 8)
)
sim <- demand_calculation( d = 30, d_std = 5, n = 42, lt = 7, of = 7, cf = 0.5)
sim
demand_calculation <- function( d, d_std, n, lt = 7, of = 7, cf = 0.95){
# Initialize stocks:
lambda <- d/min(n,30)
st <- ceiling((d/min(n,30))*lt)
delivered <- rep(0,n)
est_stock <- rep(0,n)
est_stock[1] <- st
ss <- saftey_stock(d_std, cf, op = lt + of)
#Initialize demand
demand_n <- rep(d/min(n,30), n) # Since we are considering daily demand then we need to divide by 30
demand_total <- cumsum(demand_n)
demand_op <- d*(lt+of)/n
# Check if we need to order
need_order <- rep(0,n)
order_days <- (seq(1,floor(n/of))*of) - of#(of - 1)
need_order[order_days] <- 1
# Service Level
sl <- rep(1,n)
op <- (lt+of)
# initalize all values
est_stock[1] <- est_stock[1] - demand_n[1]
acc_est_stock <- est_stock
# If the estimated stock does not cover the OP then order the demand for the LT.
if( est_stock[1]  < sum(demand_n[2:op]) - sum(delivered[2:op]) ){
#delivered[lt] <- ceiling(lt*(lambda) + ss*lt/(op))
delivered[lt] <- ceiling(lt*(lambda) + ss)
#delivered[lt] <- ceiling(op*(lambda) + ss)
}
# n days into the future
for(i in 2:n){
ii <- min(i+1,n)
t_i <- min(i+lt+of, n)
of_i <- min(i+of, n)
lt_i <- min(i+lt, n)
op_i <- min(i+op, n)
# Simulate the demand
demand_n[i] <- rpois(1, lambda)
#Calculate est_stock
acc_est_stock[i] <- est_stock[i-1] - demand_n[i] + delivered[i]
est_stock[i] <- max(est_stock[i-1] - demand_n[i] + delivered[i],0) # Ignore negatives
if(est_stock[i]  < sum(demand_n[ii:t_i]) - sum(delivered[ii:t_i]) & need_order[i] == 1){
#delivered[lt_i] <- max(ceiling(sum(demand_n[i:lt_i])-sum(delivered[i:lt_i]) + ss),0) ## Cover lead time or order period?
delivered[lt_i] <- max(ceiling(sum(demand_n[ii:lt_i])-sum(delivered[ii:lt_i]) + ss),0) ## Cover lead time or order period?
#delivered[lt_i] <- max(ceiling(sum(demand_n[i:op_i])-sum(delivered[i:op_i]) + ss),0) ## Cover lead time or order period?
}
sl[i] <- (est_stock[i] > 0)
}
df <- data.frame(
est_stock = est_stock,
acc_est_stock = acc_est_stock,
daily_demand = demand_n,
demand_total = cumsum(demand_n),
purchase_plan = delivered,
service_level = sl
)
return(df)
}
sim <- demand_calculation( d = 30, d_std = 5, n = 42, lt = 7, of = 7, cf = 0.95)
sim
sl <- sim$service_level
sl
service_level_score(sl,14)
sim <- demand_calculation( d = 30, d_std = 5, n = 42, lt = 7, of = 7, cf = 0.95)
sim
sl <- sim$service_level
sl
sim <- demand_calculation( d = 30, d_std = 5, n = 42, lt = 7, of = 7, cf = 0.95)
sim
sl <- sim$service_level
sl
sim <- demand_calculation( d = 30, d_std = 5, n = 42, lt = 7, of = 7, cf = 0.95)
sim
sl <- sim$service_level
sl
service_level_score(sl,14)
sim <- demand_calculation( d = 30, d_std = 5, n = 56, lt = 7, of = 7, cf = 0.95)
sim
sl <- sim$service_level
sl
service_level_score(sl,14)
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.99)
test
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.99)
test
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.95)
test
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.5)
test
colMeans(test)/(lt+of)
d <- 100
d_std <- d*0.1
lt <- 60
of <- 28
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.5)
test
colMeans(test)/(lt+of)
d <- 100
d_std <- d*0.1
lt <- 60
of <- 28
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.5)
test
colMeans(test)/(lt+of)
d_std <- d*0.01
lt <- 60
of <- 28
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.5)
test
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.99)
test
colMeans(test)/(lt+of)
d_std <- d*0.1
lt <- 60
of <- 28
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.99)
test
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.999)
test
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.999)
test
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.55)
test
colMeans(test)/(lt+of)
lt <- 7
of <- 7
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.55)
test
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.5)
test
colMeans(test)/(lt+of)
d <- 100
d_std <- d*0.1
lt <- 7
of <- 7
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.5)
test
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.999)
test
colMeans(test)/(lt+of)
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.5)
test
rowSums(test)/(lt+of)
rowSums(test)/(lt+of)*2
test
repeat_sim <- function(d, d_std, periods, nsim, lt, of, cf){
n <- (lt+of)*periods
p <- ceiling(n/(lt+of)) # number of periods we want to check
sl_mat <- matrix(nrow = nsim, ncol = p)
#print(p)
#print(dim(sl_mat))
for(i in 1:nsim){
sl <- demand_calculation( d = d, d_std = d_std, n = n, lt, of, cf )$service_level
#print(service_level_score( sl, p = p))
sl_mat[i,] <- service_level_score(sl, p = lt+of)
}
return(sl_mat[,-c(1,nrow(sl_mat))])
}
sim <- demand_calculation( d = 30, d_std = 5, n = 56, lt = 7, of = 7, cf = 0.95)
sim
sl <- sim$service_level
sl
service_level_score(sl,14)
d <- 100
d_std <- d*0.1
lt <- 7
of <- 7
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.5)
test
repeat_sim <- function(d, d_std, periods, nsim, lt, of, cf){
n <- (lt+of)*periods
p <- ceiling(n/(lt+of)) # number of periods we want to check
sl_mat <- matrix(nrow = nsim, ncol = p)
#print(p)
#print(dim(sl_mat))
for(i in 1:nsim){
sl <- demand_calculation( d = d, d_std = d_std, n = n, lt, of, cf )$service_level
#print(service_level_score( sl, p = p))
sl_mat[i,] <- service_level_score(sl, p = lt+of)
}
return(sl_mat[,-c(1,ncol(sl_mat))])
}
d <- 100
d_std <- d*0.1
lt <- 7
of <- 7
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.5)
test
rowMeans(test/(lt+of))
mean(rowMeans(test/(lt+of)))
sim <- demand_calculation( d = 30, d_std = 5, n = 56, lt = 7, of = 7, cf = 0.95)
sim
demand_calculation <- function( d, d_std, n, lt = 7, of = 7, cf = 0.95){
# Initialize stocks:
lambda <- d/min(n,30)
st <- 0#ceiling((d/min(n,30))*lt)
delivered <- rep(0,n)
est_stock <- rep(0,n)
est_stock[1] <- st
ss <- saftey_stock(d_std, cf, op = lt + of)
#Initialize demand
demand_n <- rep(d/min(n,30), n) # Since we are considering daily demand then we need to divide by 30
demand_total <- cumsum(demand_n)
demand_op <- d*(lt+of)/n
# Check if we need to order
need_order <- rep(0,n)
order_days <- (seq(1,floor(n/of))*of) - of#(of - 1)
need_order[order_days] <- 1
# Service Level
sl <- rep(1,n)
op <- (lt+of)
# initalize all values
est_stock[1] <- est_stock[1] - demand_n[1]
acc_est_stock <- est_stock
# If the estimated stock does not cover the OP then order the demand for the LT.
if( est_stock[1]  < sum(demand_n[2:op]) - sum(delivered[2:op]) ){
#delivered[lt] <- ceiling(lt*(lambda) + ss*lt/(op))
delivered[lt] <- ceiling(lt*(lambda) + ss)
#delivered[lt] <- ceiling(op*(lambda) + ss)
}
# n days into the future
for(i in 2:n){
ii <- min(i+1,n)
t_i <- min(i+lt+of, n)
of_i <- min(i+of, n)
lt_i <- min(i+lt, n)
op_i <- min(i+op, n)
# Simulate the demand
demand_n[i] <- rpois(1, lambda)
#Calculate est_stock
acc_est_stock[i] <- est_stock[i-1] - demand_n[i] + delivered[i]
est_stock[i] <- max(est_stock[i-1] - demand_n[i] + delivered[i],0) # Ignore negatives
if(est_stock[i]  < sum(demand_n[ii:t_i]) - sum(delivered[ii:t_i]) & need_order[i] == 1){
#delivered[lt_i] <- max(ceiling(sum(demand_n[i:lt_i])-sum(delivered[i:lt_i]) + ss),0) ## Cover lead time or order period?
delivered[lt_i] <- max(ceiling(sum(demand_n[ii:lt_i])-sum(delivered[ii:lt_i]) + ss),0) ## Cover lead time or order period?
#delivered[lt_i] <- max(ceiling(sum(demand_n[i:op_i])-sum(delivered[i:op_i]) + ss),0) ## Cover lead time or order period?
}
sl[i] <- (est_stock[i] > 0)
}
df <- data.frame(
est_stock = est_stock,
acc_est_stock = acc_est_stock,
daily_demand = demand_n,
demand_total = cumsum(demand_n),
purchase_plan = delivered,
service_level = sl
)
return(df)
}
service_level_score <- function(x, p){
#sls <- unname(tapply(x, (seq_along(x)-1) %/% (p), min))
sls <- unname(tapply(x, (seq_along(x)-1) %/% (p), sum))
#sls <- unname(tapply(x, (seq_along(x)-1) %/% (p), sum))/p
return(sls)
}
repeat_sim <- function(d, d_std, periods, nsim, lt, of, cf){
n <- (lt+of)*periods
p <- ceiling(n/(lt+of)) # number of periods we want to check
sl_mat <- matrix(nrow = nsim, ncol = p)
#print(p)
#print(dim(sl_mat))
for(i in 1:nsim){
sl <- demand_calculation( d = d, d_std = d_std, n = n, lt, of, cf )$service_level
#print(service_level_score( sl, p = p))
sl_mat[i,] <- service_level_score(sl, p = lt+of)
}
return(sl_mat[,-c(1,ncol(sl_mat))])
}
sim <- demand_calculation( d = 30, d_std = 5, n = 56, lt = 7, of = 7, cf = 0.95)
sim
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.5)
test
mean(rowMeans(test/(lt+of)))
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.95)
test
mean(rowMeans(test/(lt+of)))
sim
hist(rpois(10, 30))
hist(rpois(1000, 1))
hist(rpois(100000, 1))
max(rpois(100000, 1))
lt <- 1
of <- 0
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.95)
lt <- 0
of <- 1
test <- repeat_sim(d,d_std, 4, 100, lt, of, 0.95)
test
mean(rowMeans(test/(lt+of)))
test <- repeat_sim(d,d_std, 100, 100, lt, of, 0.95)
test
mean(rowMeans(test/(lt+of)))
